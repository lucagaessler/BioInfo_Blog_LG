<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>A bioinfo blog by Luca Gaessler</title>
<link>https://lucagaessler.github.io/BioInfo_Blog_LG/</link>
<atom:link href="https://lucagaessler.github.io/BioInfo_Blog_LG/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.8.25</generator>
<lastBuildDate>Fri, 10 Oct 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>Applied Bioinformatics Day 5</title>
  <dc:creator>Luca Gaessler</dc:creator>
  <link>https://lucagaessler.github.io/BioInfo_Blog_LG/posts/MedBioInfo_Day5/</link>
  <description><![CDATA[ 





<section id="key-concepts-i-learned-today" class="level2">
<h2 class="anchored" data-anchor-id="key-concepts-i-learned-today">Key Concepts I Learned Today</h2>
<ul>
<li><strong>Advanced ggplot</strong></li>
</ul>
<section id="advanced-ggplot" class="level3">
<h3 class="anchored" data-anchor-id="advanced-ggplot">Advanced ggplot</h3>
<p>ggplot is based on the “Grammar of Graphics” by Leland Wilkinson. In essence, each ggplot is built up from the following layers:</p>
<ul>
<li>Data</li>
<li>Aesthetics</li>
<li>Geometries</li>
<li>Facets</li>
<li>Statistics</li>
<li>Coordinates</li>
<li>Theme</li>
</ul>
<p>The essential code that an author has to provide for a ggplot is very simple and looks as follows. The tool provides defaults (which of course can be changed) for the other layers:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(data) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_function</span>()</span></code></pre></div></div>
<p>The aesthetics can then be defined for every geometric object individually or globally for the plot itself.</p>
<p>In a free coding exercise, we tried to re-create plots from popular publishers. This task showcased the immense versatility of ggplot2 and its extensions (material taken from the RaukR summer school 2023. Author: Roy Francis).</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Note</span>Disclaimer
</div>
</div>
<div class="callout-body-container callout-body">
<p>Font sizes were not adapted in our re-creation experiment since they have to be identified and downloaded beforehand. See the original figure on the left and my recreations on the right.</p>
</div>
</div>
<ol type="1">
<li>The Economist</li>
</ol>
<p>Original article: https://www.economist.com/graphic-detail/2011/12/02/corrosive-corruption</p>
<div class="quarto-layout-panel" data-layout="[[50,50]]">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-id" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-id-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://lucagaessler.github.io/BioInfo_Blog_LG/posts/MedBioInfo_Day5/figures/economist-scatterplot_OG.png" style="width:100.0%;height:100.0%" class="figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-id-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: <strong>Original Figure</strong>
</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-id" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-id-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://lucagaessler.github.io/BioInfo_Blog_LG/posts/MedBioInfo_Day5/figures/economist-scatterplot.png" style="width:90.0%;height:90.0%" class="figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-id-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: <strong>Re-created Figure</strong>
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<ol start="2" type="1">
<li>The Wall Street Journal</li>
</ol>
<p>Original article: https://graphics.wsj.com/infectious-diseases-and-vaccines/</p>
<div class="quarto-layout-panel" data-layout="[[50,50]]">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-id" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-id-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://lucagaessler.github.io/BioInfo_Blog_LG/posts/MedBioInfo_Day5/figures/wsj-heatmap_OG.png" style="width:100.0%;height:100.0%" class="figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-id-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: <strong>Original Figure</strong>
</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-id" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-id-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://lucagaessler.github.io/BioInfo_Blog_LG/posts/MedBioInfo_Day5/figures/wsj-heatmap.png" style="width:100.0%;height:100.0%" class="figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-id-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;4: <strong>Re-created Figure</strong>
</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="reflections" class="level2">
<h2 class="anchored" data-anchor-id="reflections">Reflections</h2>
<p>Although I am a frequent user of ggplot2 and its functionalities, the theory behind the tools was interesting to hear and helped me better understand why I am doing the things that I am doing. Re-creating the published figures was an especially fun task!</p>
<p><strong>Thanks for reading!</strong></p>


</section>

 ]]></description>
  <category>course</category>
  <category>medbioinfo</category>
  <category>ggplot</category>
  <guid>https://lucagaessler.github.io/BioInfo_Blog_LG/posts/MedBioInfo_Day5/</guid>
  <pubDate>Fri, 10 Oct 2025 00:00:00 GMT</pubDate>
  <media:content url="https://lucagaessler.github.io/BioInfo_Blog_LG/posts/MedBioInfo_Day5/figures/economist-scatterplot.png" medium="image" type="image/png" height="106" width="144"/>
</item>
<item>
  <title>Applied Bioinformatics Day 4</title>
  <dc:creator>Luca Gaessler</dc:creator>
  <link>https://lucagaessler.github.io/BioInfo_Blog_LG/posts/MedBioInfo_Day4/</link>
  <description><![CDATA[ 





<section id="key-concepts-i-learned-today" class="level2">
<h2 class="anchored" data-anchor-id="key-concepts-i-learned-today">Key Concepts I Learned Today</h2>
<ul>
<li><strong>Running a Nextflow script</strong></li>
<li><strong>Running an nf-core pipeline</strong></li>
</ul>
<section id="running-a-nextflow-script" class="level3">
<h3 class="anchored" data-anchor-id="running-a-nextflow-script">Running a Nextflow script</h3>
<p>Today was all about hands-on experience in Nextflow. In this context, we ran an RNA-sequencing pipeline on real-world data. This pipeline works by quantifying the raw reads files via Salmon, followed by a quality control session using FastQC, whose reports are then summarized via the MultiQC tool. Here, the power of Nextflow comes into play. All of these functionalities - be it quantification, quality control and so on - could be replaced or complemented by any other tool of our choice in a modular fashion. These Nextflow process modules can even be written in a completely different programming language!</p>
<p>Importantly, each process module has the following structure:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode groovy code-with-copy"><code class="sourceCode groovy"><span id="cb1-1">process INDEX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-2">    input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb1-3"></span>
<span id="cb1-4">    optional container</span>
<span id="cb1-5"></span>
<span id="cb1-6">    output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb1-7"></span>
<span id="cb1-8">    script<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    [bash code, can refer to a script in another language]</span></span>
<span id="cb1-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
<p>These processes are then dynamically connected in a so-called workflow scope. Here is a simplified example from our analysis above (each process in capital letters):</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode groovy code-with-copy"><code class="sourceCode groovy"><span id="cb2-1">workflow <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-2"></span>
<span id="cb2-3">    index_ch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">INDEX</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>transcriptome_file<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-4">    quant_ch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">QUANTIFICATION</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>index_ch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> read_pairs_ch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-5">    fastqc_ch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">FASTQC</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>read_pairs_ch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">MULTIQC</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>quant_ch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mix</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fastqc_ch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">).</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">collect</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">())</span></span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
<p>Once everything is in place, the Nextflow command is straight-forward. If you work on a cluster, do not forget your .config file!</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode groovy code-with-copy"><code class="sourceCode groovy"><span id="cb3-1">nextflow run script<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>nf</span></code></pre></div></div>
</section>
<section id="running-an-nf-core-pipeline" class="level3">
<h3 class="anchored" data-anchor-id="running-an-nf-core-pipeline">Running an nf-core pipeline</h3>
<p>Of course, not every Nextflow pipeline has to be written from scratch. A lot of the readers will be pleased to hear that the nf-core platform provides off-the-shelf pipelines for all sorts of bioinformatic processes. One of their most popular pipelines is the one for analysing RNAseq data:</p>
<div id="fig-id" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-id-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://lucagaessler.github.io/BioInfo_Blog_LG/posts/MedBioInfo_Day4/nf-core-rnaseq_metro_map_grey.png" class="quarto-figure quarto-figure-center figure-img" style="width:100.0%;height:100.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-id-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: <strong>nf-core RNAseq Pipeline.</strong> Schematic representation of the RNAseq pipeline from nf-core. Different stages and possible quantification methods are highlighted. Adapted from https://nf-co.re/rnaseq/3.14.0/ (last visit: 10/10/2025)
</figcaption>
</figure>
</div>
<p>We set up the pipeline via the instructions on the nf-core website - using the offline mode - and ran it on the high-performance cluster HPC2N. I can only recommend this approach, especially when dealing with large sample numbers: it is straight-forward, robust, and highly reproducible. In summary, if an nf-core pipeline exists for your purposes, do not hesitate to try it out!</p>
</section>
</section>
<section id="reflections" class="level2">
<h2 class="anchored" data-anchor-id="reflections">Reflections</h2>
<p>For my thoughts on Nextflow and nf-core, please have a look at my previous post.</p>
</section>
<section id="next-steps" class="level2">
<h2 class="anchored" data-anchor-id="next-steps">Next Steps</h2>
<p>Tomorrow will be the last course day with a ggplot2 session as well as the opportunity to provide feedback to the organizers.</p>
<p><strong>Thanks for reading!</strong></p>


</section>

 ]]></description>
  <category>course</category>
  <category>medbioinfo</category>
  <category>nf-core</category>
  <guid>https://lucagaessler.github.io/BioInfo_Blog_LG/posts/MedBioInfo_Day4/</guid>
  <pubDate>Thu, 09 Oct 2025 00:00:00 GMT</pubDate>
  <media:content url="https://lucagaessler.github.io/BioInfo_Blog_LG/posts/MedBioInfo_Day4/nf-core-rnaseq_metro_map_grey.png" medium="image" type="image/png" height="60" width="144"/>
</item>
<item>
  <title>Applied Bioinformatics Day 3</title>
  <dc:creator>Luca Gaessler</dc:creator>
  <link>https://lucagaessler.github.io/BioInfo_Blog_LG/posts/MedBioInfo_Day3/</link>
  <description><![CDATA[ 





<section id="key-concepts-i-learned-today" class="level2">
<h2 class="anchored" data-anchor-id="key-concepts-i-learned-today">Key Concepts I Learned Today</h2>
<ul>
<li><strong>Nextflow</strong></li>
<li><strong>nf-core</strong></li>
</ul>
<section id="nextflow" class="level3">
<h3 class="anchored" data-anchor-id="nextflow">Nextflow</h3>
<p>Nextflow is a tool used to connect different parts of your analysis. While this might trigger reactions like “I can run my scripts myself!” and “This is more a nice-to-have!”, the use of workflow managers is real and multifold. Nextflow scripts not only lower manual efforts, and thereby reduce human error, but also enhance analytical scalability and reproducibility. When scripts are run over many samples, high-performance clusters are essential. When transferring scripts from local computers to clusters, Nexflow is a game-changer. It always keeps the functional logic of a workflow separate from its execution, meaning that you only have to exchange your local for appropriate server parameters to scale up your analysis. Additionally, Nextflow inherently incorporates version control and containerization, which - as I told about in the previous posts - are true boosters of science reproducibility.</p>
<p>A very useful function in Nextflow is the “resume” option. Imagine your pipeline runs into an error right after a computationally expensive calculation. After fixing the bug, “resume” allows you to re-run the fixed pipeline from where it stopped, skipping all unchanged steps and recovering their results from cache instead.</p>
<div id="fig-id" class="quarto-float quarto-figure quarto-figure-center anchored" data-fig-align="center">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-id-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://lucagaessler.github.io/BioInfo_Blog_LG/posts/MedBioInfo_Day3/Nextflow_scheme.png" class="quarto-figure quarto-figure-center figure-img" style="width:80.0%;height:80.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-id-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: <strong>Basic Nextflow Architecture.</strong> Nextflow processes, which contain the executable scripts, are connected via channels that move the data along the workflow. Processes are modular and can therefore be written in different programming languages. Adapted from https://carpentries-incubator.github.io/workflows-nextflow/aio.html (last visit: 08/10/2025)
</figcaption>
</figure>
</div>
</section>
<section id="nf-core" class="level3">
<h3 class="anchored" data-anchor-id="nf-core">nf-core</h3>
<p>Building up on Nextflow, nf-core is a web-based platform that provides curated &amp; ready-to-use bioinformatic pipelines. The platform is largely community-driven. Volunteers create and validate the provided pipelines (at the time of this post, 139x pipelines are available) - the code is freely accessible on GitHub. Judging from my experience, most of the available pipelines are built for data processing tasks, while the focus lies less on downstream biological analyses. A very prominent use-case of nf-core is their “rnaseq” pipeline, which generates count matrices form raw FASTQ files, including quality control reports vias FastQC.</p>
</section>
</section>
<section id="reflections" class="level2">
<h2 class="anchored" data-anchor-id="reflections">Reflections</h2>
<p>Although I currently see myself more as data scientist with a focus on biological analyses, workflow managers and off-the-shelf pipelines will definitely play an important part in the future of my PhD projects. Biological datasets are getting larger and larger, which calls for increased scalability and the need for high-performance computing clusters. All of this is facilitated by tools like Nextflow and will definitely change the way I work right now.</p>
</section>
<section id="next-steps" class="level2">
<h2 class="anchored" data-anchor-id="next-steps">Next Steps</h2>
<p>While we have only scratched the surface of bioinformatic pipelines today, tomorrow will bring more hands-on tasks on Nextflow as well as the use of nf-core pipelines.</p>
<p><strong>Thanks for reading!</strong></p>


</section>

 ]]></description>
  <category>course</category>
  <category>medbioinfo</category>
  <category>nextflow</category>
  <guid>https://lucagaessler.github.io/BioInfo_Blog_LG/posts/MedBioInfo_Day3/</guid>
  <pubDate>Wed, 08 Oct 2025 00:00:00 GMT</pubDate>
  <media:content url="https://lucagaessler.github.io/BioInfo_Blog_LG/posts/MedBioInfo_Day3/Nextflow_scheme.png" medium="image" type="image/png" height="83" width="144"/>
</item>
<item>
  <title>Applied Bioinformatics Day 2</title>
  <dc:creator>Luca Gaessler</dc:creator>
  <link>https://lucagaessler.github.io/BioInfo_Blog_LG/posts/MedBioInfo_Day2/</link>
  <description><![CDATA[ 





<section id="key-concepts-i-learned-today" class="level2">
<h2 class="anchored" data-anchor-id="key-concepts-i-learned-today">Key Concepts I Learned Today</h2>
<ul>
<li><strong>Coding Environments</strong></li>
<li><strong>Containerization</strong></li>
</ul>
<section id="coding-environments" class="level3">
<h3 class="anchored" data-anchor-id="coding-environments">Coding Environments</h3>
<p>Today’s session was all about reproducibility. How can we, as computational biologists, ensure that our tools always give the same results? This question becomes especially relevant when we share code with collaborators, which might use different operating systems or have packages installed in different versions.</p>
<p>Coding environments like Pixi can help us not only to keep track of the tools and the versions that we use in our analyses but also to enforce them within the limits of a project. A Pixi-controlled environment covers one directory as well as its subdirectories, and is created similarly to a GitHub repository:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> init <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">channel</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div></div>
<p>By providing channels, i.e.&nbsp;the tool space that Pixi can choose from, we define where our packages are coming from. For example, we provided the Conda-Forge and Bioconda databases. Packages can then be easily installed and run using the following commands:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> add <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">package</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> run <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">command</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div></div>
<p>Alternatively, the Pixi environment can also be set up and accessed as its own shell.</p>
</section>
<section id="containerization" class="level3">
<h3 class="anchored" data-anchor-id="containerization">Containerization</h3>
<p>Containers work quite similarly to environments like Pixi but isolate their content even more from the machine they are running on. Even the operating system can be different within the container. This allows the users to apply different versions of the same tool on one computer. Additionally, containers ensure a high degree of reproducibility when shared. They are stored and transferred as “container images”, a specific type of metadata. These images can be conveniently downloaded from Websites like “docker.com” and then be used to build the actual container. Prominent examples of container managment softwares are Docker, often used on individual computers, and Apptainer, which is often the tool of choice for Linux-based computer clusters.</p>
<p>Containers can be run both from inside (suitable for exploratory analyses) and outside (once the workflow is established):</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apptainer</span> shell <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">container</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#inside</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apptainer</span> exec <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">container</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">command</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#outside</span></span></code></pre></div></div>
<p>It is possible to build your own container, giving you all the power over its operating system, dependencies, versions, etc. On the other hand, this task is often computationally extensive and in most cases, a suitable container with the desired tool(s) is already available for download from the web.</p>
</section>
</section>
<section id="reflections" class="level2">
<h2 class="anchored" data-anchor-id="reflections">Reflections</h2>
<p>Naturally, there is no perfect solution among the two approaches and both have their Pros &amp; Cons. While environments like Pixi let you interact with outside directories more easily than containers, tools like Docker provide you with a higher degree of control over the conditions in which your analyses take place. In the end, it is all about finding a tool that balances outcome and effort according to the situation. The important part is to increase the reproducibility of your science, and both tools are a valuable addition to that.</p>
</section>
<section id="next-steps" class="level2">
<h2 class="anchored" data-anchor-id="next-steps">Next Steps</h2>
<p>Tomorrow will be all about bioinformatic pipelines and how to built them! Stay tuned for my next post, which will be about…</p>
<p>Nextflow!</p>
<p><strong>Thanks for reading!</strong></p>


</section>

 ]]></description>
  <category>course</category>
  <category>medbioinfo</category>
  <category>Docker</category>
  <guid>https://lucagaessler.github.io/BioInfo_Blog_LG/posts/MedBioInfo_Day2/</guid>
  <pubDate>Tue, 07 Oct 2025 00:00:00 GMT</pubDate>
  <media:content url="https://lucagaessler.github.io/BioInfo_Blog_LG/posts/MedBioInfo_Day2/docker-mark-blue.png" medium="image" type="image/png" height="114" width="144"/>
</item>
<item>
  <title>Applied Bioinformatics Day 1</title>
  <dc:creator>Luca Gaessler</dc:creator>
  <link>https://lucagaessler.github.io/BioInfo_Blog_LG/posts/MedBioInfo_Day1/</link>
  <description><![CDATA[ 





<section id="key-concepts-i-learned-today" class="level2">
<h2 class="anchored" data-anchor-id="key-concepts-i-learned-today">Key Concepts I Learned Today</h2>
<ul>
<li><strong>Collaborating in GitHub</strong></li>
<li><strong>Quarto Blogs</strong></li>
<li><strong>GitHub Pages &amp; Actions</strong></li>
</ul>
<section id="collaborating-in-github" class="level3">
<h3 class="anchored" data-anchor-id="collaborating-in-github">Collaborating in GitHub</h3>
<p>Today’s practical session was initiated by a group task. The goal was to create an ordered list of all participants’ names. An easy task at first but not if you consider the following rule: “Each student can only write their own name in a stand-alone file.”. This means that the course members had to collaborate on GitHub to merge their documents and handle the resulting conflicts. The idea was to work in pairs, then collaborate with the merged list of another pair, and so on… The actual workflow turned out to be less structured but we still managed to come up with the full list in the end.</p>
<p>Merging the documents always involved the following steps:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> pull <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update local repository</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> checkout <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">branch_1</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># switch to branch that will be merged into</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> merge <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">branch_2</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># merge the two branches</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># solve conflicts</span></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> add <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># stage changes</span></span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> commit <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># commit changes</span></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> push <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add changes to remote repository</span></span></code></pre></div></div>
</section>
<section id="quarto-blogs" class="level3">
<h3 class="anchored" data-anchor-id="quarto-blogs">Quarto Blogs</h3>
<p>Quarto has been developed for literate programming, meaning that it can combine code with text in the markdown format. Quarto can be used to generate beautiful output documents, including the HTTP format for websites and blogs. To test its capabilities, each course member will follow along this course, “Applied Bioinformatics”, in a blog format - one post per day. Of course version-controlled via Git(Hub)!</p>
</section>
<section id="github-pages-actions" class="level3">
<h3 class="anchored" data-anchor-id="github-pages-actions">GitHub Pages &amp; Actions</h3>
<p>Each member set up his or her blog as a public website via GitHub Pages. Now, whenever local changes are pushed to the remote repository, GitHub will re-build the website, thereby updating its contents. This functionality is provided by GitHub Actions.</p>
</section>
</section>
<section id="reflections" class="level2">
<h2 class="anchored" data-anchor-id="reflections">Reflections</h2>
<p>In conclusion, the first day was a great start into the course! Now that we have laid the foundation for collaborative work via GitHub as well as our primary medium of documentation, the Quarto Blog, we are ready to dive into the complex topics of Bioinformatics!</p>
</section>
<section id="next-steps" class="level2">
<h2 class="anchored" data-anchor-id="next-steps">Next Steps</h2>
<p>I am particularly interested in concepts regarding containerization as well as pipeline building. In the context of this course, tools for both (Docker, Nextflow) will be highlighted in the upcoming days!</p>
<p><strong>Thanks for reading!</strong></p>


</section>

 ]]></description>
  <category>course</category>
  <category>medbioinfo</category>
  <category>GitHub</category>
  <guid>https://lucagaessler.github.io/BioInfo_Blog_LG/posts/MedBioInfo_Day1/</guid>
  <pubDate>Mon, 06 Oct 2025 16:00:00 GMT</pubDate>
  <media:content url="https://lucagaessler.github.io/BioInfo_Blog_LG/posts/MedBioInfo_Day1/GitHub_Invertocat_Dark.png" medium="image" type="image/png" height="142" width="144"/>
</item>
<item>
  <title>Welcome To My Bioinformatics Blog</title>
  <dc:creator>Luca Gaessler</dc:creator>
  <link>https://lucagaessler.github.io/BioInfo_Blog_LG/posts/welcome/</link>
  <description><![CDATA[ 





<p>This is the first post in my Quarto blog. Welcome!</p>
<p><img src="https://lucagaessler.github.io/BioInfo_Blog_LG/posts/welcome/thumbnail.jpg" class="img-fluid"></p>



 ]]></description>
  <category>news</category>
  <category>bioinfo</category>
  <guid>https://lucagaessler.github.io/BioInfo_Blog_LG/posts/welcome/</guid>
  <pubDate>Mon, 06 Oct 2025 14:00:00 GMT</pubDate>
  <media:content url="https://lucagaessler.github.io/BioInfo_Blog_LG/posts/welcome/thumbnail.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
